import datetime
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import bold
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import asyncpg

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class GameForm(StatesGroup):
    game_type = State()
    season = State()
    team_name = State()

def str_to_date(date_str: str) -> datetime.date:
    return datetime.datetime.strptime(date_str, '%d.%m.%Y').date()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!</b>\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–∞–º \"–ö–≤–∏–∑, –ø–ª–∏–∑!\".\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /show_games.",
        parse_mode="HTML"
    )
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

@dp.message(Command("help"))
async def command_help_handler(message: types.Message) -> None:
    await message.answer(
        f"**{bold('–ö–≤–∏–∑, –ø–ª–∏–∑! (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)')}**\n"
        "–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ–∑–æ–Ω–∞–º –∏–≥—Ä \"–ö–≤–∏–∑, –ø–ª–∏–∑!\".\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /show_games.\n"
        "–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä.\n"
        "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–≥—Ä–∞–º –±—ã–ª–∞ –≤–∑—è—Ç–∞ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞: 'https://spb.quizplease.ru/schedule-past?QpGameSearch%5BcityId%5D=17&QpGameSearch%5Bmonth%5D=0&QpGameSearch%5Btype%5D=all&QpGameSearch%5Bbars%5D=all'.\n"
        "–í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤ —Å–≤—è–∑–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–∞ –∏–≥—Ä –æ—Ç 21.08.2024.\n"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show_games
@dp.message(Command("show_games"))
async def show_games(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–ª–∞—Å—Å–∏–∫–∞ üë®‚Äçüéì", callback_data="type_classic")],
        [InlineKeyboardButton(text="–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞ üåç", callback_data="type_thematicclassic")],
        [InlineKeyboardButton(text="–í—Å—è –∫–ª–∞—Å—Å–∏–∫–∞ üìö", callback_data="type_allclassic")],
        [InlineKeyboardButton(text="–ö–∏–Ω–æ –∏ –º—É–∑—ã–∫–∞ üé¨", callback_data="type_kim")],
        [InlineKeyboardButton(text="–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ö–∏–ú üéº", callback_data="type_thematickim")],
        [InlineKeyboardButton(text="–í–µ—Å—å –ö–∏–ú üé≠", callback_data="type_allkim")],
        [InlineKeyboardButton(text="–í—Å–µ –∏–≥—Ä—ã üìé", callback_data="type_allgames")],
    ])
    
    await message.delete()
    bot_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:", reply_markup=keyboard)
    await state.update_data(last_bot_message_id=bot_message.message_id)
    await state.set_state(GameForm.game_type)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã
@dp.callback_query(GameForm.game_type)
async def process_game_type(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    game_type = callback.data.split('_')[1]
    await state.update_data(game_type=game_type)
    
    seasons = ["üçÅ –û—Å–µ–Ω—å: 2024", "üåû –õ–µ—Ç–æ: 2024", "üå∏ –í–µ—Å–Ω–∞: 2024", "‚ùÑÔ∏è –ó–∏–º–∞: 2024",
               "üçÅ –û—Å–µ–Ω—å: 2023", "üåû –õ–µ—Ç–æ: 2023", "üå∏ –í–µ—Å–Ω–∞: 2023", "‚ùÑÔ∏è –ó–∏–º–∞: 2023",
               "üçÅ –û—Å–µ–Ω—å: 2022", "üåû –õ–µ—Ç–æ: 2022", "üå∏ –í–µ—Å–Ω–∞: 2022", "‚ùÑÔ∏è –ó–∏–º–∞: 2022",
               "üçÅ –û—Å–µ–Ω—å: 2021", "üåû –õ–µ—Ç–æ: 2021", "üå∏ –í–µ—Å–Ω–∞: 2021", "‚ùÑÔ∏è –ó–∏–º–∞: 2021",
               "üçÅ –û—Å–µ–Ω—å: 2020"]
    if 'kim' in game_type:
        seasons = ["üå∏ –í–µ—Å–Ω–∞: 2024", "üçÅ –û—Å–µ–Ω—å: 2023", "üå∏ –í–µ—Å–Ω–∞: 2023", "üçÅ –û—Å–µ–Ω—å: 2022"]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    buttons = [InlineKeyboardButton(text=season, callback_data=f"season_{i}") for i, season in enumerate(seasons)]

    for i in range(0, len(buttons), 2):
        row = buttons[i:i + 2]
        keyboard.inline_keyboard.append(row)
    
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="–í—Å–µ –≤—Ä–µ–º—è ‚è∞", callback_data="all_games")])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∏–≥—Ä—ã", callback_data="back_to_show_games")])
    
    await callback.message.delete()
    bot_message = await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:", reply_markup=keyboard)
    await state.update_data(last_bot_message_id=bot_message.message_id)
    await state.set_state(GameForm.season)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞
@dp.callback_query(GameForm.season)
async def process_season(callback: CallbackQuery, state: FSMContext):
    if callback.data == "back_to_show_games":
        await show_games(callback.message, state)
        return
    
    await callback.answer()
    user_data = await state.get_data()
    game_type = user_data.get('game_type')

    kim_dates = ['21.03.2024', '21.09.2023', '16.03.2023', '22.09.2022']
    classic_dates = [
        '29.08.2024', '30.05.2024', '29.02.2024', '30.11.2023', 
        '07.09.2023', '01.06.2023', '02.03.2023', '01.12.2022',
        '01.09.2022', '02.06.2022', '03.03.2022', '01.12.2021', 
        '31.08.2021', '02.06.2021', '03.03.2021', '02.12.2020', 
        '06.09.2020']

    classic_dates.insert(0, datetime.datetime.now().date().strftime('%d.%m.%Y'))
    kim_dates.insert(0, datetime.datetime.now().date().strftime('%d.%m.%Y'))

    if callback.data == "all_games":
        if 'kim' in game_type:
            start_season = str_to_date(kim_dates[-1])
            end_season = str_to_date(kim_dates[0])
        else:
            start_season = str_to_date(classic_dates[-1])
            end_season = str_to_date(classic_dates[0])
    else:
        index = int(callback.data.split('_')[1])

        if index + 1 < len(classic_dates):
            start_season = str_to_date(classic_dates[index + 1])
            end_season = str_to_date(classic_dates[index])
            if 'kim' in game_type:
                start_season = str_to_date(kim_dates[index + 1])
                end_season = str_to_date(kim_dates[index])
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω.")
            return

    await state.update_data(start_season=start_season, end_season=end_season)
    print(start_season, end_season)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–µ–∑–æ–Ω–∞", callback_data="back_to_game_type")]
    ])
    
    await callback.message.delete()
    bot_message = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=keyboard)
    await state.update_data(last_bot_message_id=bot_message.message_id)
    await state.set_state(GameForm.team_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
@dp.message(GameForm.team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    team_name = message.text.strip()
    await state.update_data(team_name=team_name)
    user_data = await state.get_data()
    
    db: asyncpg.Pool = dp['db']
    
    query = """
        WITH most_popular_day AS (
            SELECT 
                day_of_week,
                COUNT(*) AS occurrences
            FROM 
                {}
            WHERE 
                date >= $1
                AND date < $2
                AND team_name ILIKE $3
            GROUP BY 
                day_of_week
            ORDER BY 
                occurrences DESC
            LIMIT 1
        ),
        most_popular_package AS (
            SELECT 
                package_number,
                COUNT(*) AS occurrences
            FROM 
                {}
            WHERE 
                date >= $1
                AND date < $2
                AND team_name ILIKE $3
            GROUP BY 
                package_number
            ORDER BY 
                occurrences DESC
            LIMIT 1
        ),
        most_popular_restaurant AS (
            SELECT 
                restaurant,
                COUNT(*) AS occurrences
            FROM 
                {}
            WHERE 
                date >= $1
                AND date < $2
                AND team_name ILIKE $3
            GROUP BY 
                restaurant
            ORDER BY 
                occurrences DESC
            LIMIT 1
        )
        SELECT 
            COUNT(*) AS games_played, 
            ROUND(AVG(total_points)::numeric, 2) AS average_score,
            ROUND(AVG(place)::numeric, 2) AS average_place,
            (SELECT day_of_week FROM most_popular_day) AS most_popular_value_day,
            (SELECT occurrences FROM most_popular_day) AS occurrences_day,
            (SELECT package_number FROM most_popular_package) AS most_popular_value_package,
            (SELECT occurrences FROM most_popular_package) AS occurrences_package,
            (SELECT restaurant FROM most_popular_restaurant) AS most_popular_value_restaurant,
            (SELECT occurrences FROM most_popular_restaurant) AS occurrences_restaurant
        FROM 
            {}
        WHERE 
            date >= $1
            AND date < $2
            AND team_name ILIKE $3
    """

    comp_teams = """        
        WITH team_games AS (
            SELECT 
                team_name,
                game_name,
                package_number
            FROM {}
            WHERE 
                date >= $1
                AND date < $2
                AND team_name ILIKE $3
        ),
        all_games AS (
            SELECT 
                tg.team_name AS current_team,
                g.team_name AS opponent_team
            FROM team_games tg
            JOIN {} g
            ON tg.game_name = g.game_name
            AND tg.package_number = g.package_number
            WHERE g.team_name NOT ILIKE $3
        )
        SELECT 
            opponent_team,
            COUNT(*) AS games_played
        FROM all_games
        GROUP BY opponent_team
        ORDER BY games_played DESC
        LIMIT 3;
    """

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    table_name = user_data['game_type']
    formatted_query = query.format(table_name, table_name, table_name, table_name)
    formatted_comp = comp_teams.format(table_name, table_name)

    try:
        async with db.acquire() as connection:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            print("start query")
            result = await connection.fetchrow(formatted_query, user_data['start_season'], user_data['end_season'], user_data['team_name'])
            # print(result)
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∞–º
            result2 = await connection.fetch(formatted_comp, user_data['start_season'], user_data['end_season'], user_data['team_name'])

        if result:
            games_played = result['games_played']
            average_score = result['average_score']
            average_place = result['average_place']
            most_popular_value_day = result['most_popular_value_day']
            occurrences_day = result['occurrences_day']
            most_popular_value_package = result['most_popular_value_package']
            occurrences_package = result['occurrences_package']
            most_popular_value_restaurant = result['most_popular_value_restaurant']
            occurrences_restaurant = result['occurrences_restaurant']

            top_competitors = [
                {"opponent_team": row['opponent_team'], "games_played": row['games_played']}
                for row in result2
            ]
            top_competitors_formatted = '\n'.join([f'  ‚Ä¢ {row["opponent_team"]} ({row["games_played"]} –∏–≥—Ä)' for row in top_competitors])

            response = (
                f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã \"{user_data['team_name']}\":</b>\n"
                f"‚Ä¢ –¢–∏–ø –∏–≥—Ä—ã: {user_data['game_type']}\n"
                f"‚Ä¢ –°–µ–∑–æ–Ω: {user_data['start_season']} - {user_data['end_season']}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {games_played}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ: {average_place}\n"
                f"‚Ä¢ –°–∞–º—ã–π —á–∞—Å—Ç–æ –∏–≥—Ä–∞—é—â–∏–π—Å—è –ø–∞–∫–µ—Ç: {most_popular_value_package}, ({occurrences_package} —Ä–∞–∑)\n"
                f"‚Ä¢ –°–∞–º—ã–π —á–∞—Å—Ç—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {most_popular_value_day}, ({occurrences_day} —Ä–∞–∑)\n"
                f"‚Ä¢ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {most_popular_value_restaurant}, ({occurrences_restaurant} —Ä–∞–∑)\n"
                f"‚Ä¢ –°–∞–º—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥—ã:\n"
                f"{top_competitors_formatted}"
            )

        else:
            response = "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    except Exception as e:
        response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_message_id = message.message_id
    state_data = await state.get_data()
    bot_message_id = state_data.get('last_bot_message_id')
    
    if bot_message_id:
        print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å ID: {bot_message_id}")
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=bot_message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
    else:
        print("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    await message.delete()
    
    await message.answer(response, parse_mode="HTML")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–µ–∑–æ–Ω–∞", callback_data="back_to_game_type")]
    ])
    
    bot_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=keyboard)
    await state.update_data(last_bot_message_id=bot_message.message_id)
    await state.set_state(GameForm.team_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏
@dp.callback_query(lambda c: c.data == "back_to_game_type")
async def back_to_game_type(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await process_game_type(callback, state)

@dp.callback_query(lambda c: c.data == "back_to_show_games")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_games(callback.message, state)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup():
    dp['db'] = await asyncpg.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME
    )
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")

# –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
async def on_shutdown():
    await dp['db'].close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == '__main__':
    asyncio.run(main())
